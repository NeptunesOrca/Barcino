extends SelectionPropertyField
class_name DropdownPropertyField
## The [SelectionPropertyField] generated by [DropdownProperty].
##
## Allows the user to interact with the properties of [DraggableObject]s through the [SelectionMenu].
## [br]Executes the definition given by a [DropdownProperty].[br]
## [br]The function [member SelectionProperty.commandName] of the [member SelectionPropertyField.associatedObject] will be called when:
## [br] - [member dropdown] emits [signal OptionButton.item_selected], returning the index within the options list that the user has selected.

#region Member Variables
## The [OptionButton] that displays the [member DropdownProperty.options]
var dropdown : OptionButton
#endregion

#region Initialization
## Class Initialization
func _init(obj : DraggableObject, property : DropdownProperty):
	super(obj, property) #calls SelectionPropertyField._init()
	
	# create the dropdown menu
	dropdown = OptionButton.new()
	dropdown.size_flags_horizontal = SIZE_EXPAND_FILL # let the dropdown menu take up all the extra space after name
	
	#populate the dropdown options
	for item in property.options:
		dropdown.add_item(item)
	
	#add as child
	self.add_child(dropdown)
	
	#connect to object
	dropdown.item_selected.connect(Callable(obj, property.commandName))
#endregion

#region Functions
static func putAtFrontOfArray(optionsArray : Array, index : int):
	if (optionsArray.size() < index):
		var err_msg = "The array " + str(optionsArray) + " does not have enough items in it to move index " + str(index) + " to the front of the array"
		ErrorHandler.newError(err_msg)
		return
	optionsArray.push_front(optionsArray.pop_at(index))
#endregion
