extends SelectionPropertyField
class_name SliderPropertyField
## The [SelectionPropertyField] generated by [SliderProperty].
##
## Allows the user to interact with the properties of [DraggableObject]s through the [SelectionMenu].
## [br]Executes the definition given by a [SliderProperty].
## [br]Displays a slider that the user can use to adjust some numeric value.
## [br]The function [member SelectionProperty.commandName] of the [member SelectionPropertyField.associatedObject] will be called when:
## [br] - [member slider] emits [signal Range.value_changed]

#region Member Variables
## The [HSlider] used to adjust some numeric value
var slider : HSlider
## The [Container] that the [member slider] will go in.
## [br]A [VBoxContainer] to display the elements vertically.
var parentContainer : VBoxContainer
#endregion

#region Initialization
## Class Initialization
func _init(obj : DraggableObject, property : SliderProperty):
	super(obj, property) #calls SelectionPropertyField._init()
	
	# create and setup the slider
	slider = HSlider.new()
	slider.scrollable = true
	slider.tick_count = property.ticks + 1 # accounts for the 1 extra tick needed to add one to at the maximum
	# this sets a default behaviour for maximum and minimums, including whether the user can go above/below them (only if they are specified)
	if (property.minimum > SliderProperty.NO_MINIMUM):
		slider.min_value = property.minimum
		slider.allow_lesser = false
	else:
		slider.allow_lesser = true
		#displayed min will be whatever the default it
	if (property.maximum < SliderProperty.NO_MAXIMUM):
		slider.max_value = property.maximum
		slider.allow_greater = false
	else:
		slider.allow_greater = true
		#displayed max will be whatever the default is
		
	#override allow higher/lower if specified
	if (property.hasOverrides()):
		slider.allow_greater = property.allowHigher
		slider.allow_lesser = property.allowLower
	slider.step = property.step
	slider.value = property.defaultValue
	slider.size_flags_horizontal = SIZE_EXPAND_FILL # will take up whatever space it can
	
	# create a dummy vBox so that we can stack elements vertically instead of horizontally
	parentContainer = VBoxContainer.new()
	parentContainer.size_flags_horizontal = SIZE_EXPAND_FILL
	self.add_child(parentContainer)
	#restack the name within the parentContainer
	self.remove_child(self.propertyName)
	parentContainer.add_child(self.propertyName)
	# add the textbox to the container
	parentContainer.add_child(slider)
	
	# connect the slider
	slider.value_changed.connect(Callable(obj,property.commandName))
	#value_changed sends a float of value, so no need for setters or getters or anything
#endregion

#region Functions
##
func getSlider() -> HSlider:
	return slider
#endregion
